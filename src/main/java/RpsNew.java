import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.0.
 */
public final class RpsNew extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b604051602080610a9a833981016040528080519060200190919050505b8060038190555060008060405180807f726f636b000000000000000000000000000000000000000000000000000000008152506004019050908152602001604051809103902060405180807f726f636b0000000000000000000000000000000000000000000000000000000081525060040190509081526020016040518091039020819055506002600060405180807f726f636b000000000000000000000000000000000000000000000000000000008152506004019050908152602001604051809103902060405180807f706170657200000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506001600060405180807f726f636b000000000000000000000000000000000000000000000000000000008152506004019050908152602001604051809103902060405180807f73636973736f727300000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020819055506001600060405180807f70617065720000000000000000000000000000000000000000000000000000008152506005019050908152602001604051809103902060405180807f726f636b00000000000000000000000000000000000000000000000000000000815250600401905090815260200160405180910390208190555060008060405180807f70617065720000000000000000000000000000000000000000000000000000008152506005019050908152602001604051809103902060405180807f706170657200000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506002600060405180807f70617065720000000000000000000000000000000000000000000000000000008152506005019050908152602001604051809103902060405180807f73636973736f727300000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020819055506002600060405180807f73636973736f72730000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902060405180807f726f636b0000000000000000000000000000000000000000000000000000000081525060040190509081526020016040518091039020819055506001600060405180807f73636973736f72730000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902060405180807f7061706572000000000000000000000000000000000000000000000000000000815250600501905090815260200160405180910390208190555060008060405180807f73636973736f72730000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902060405180807f73636973736f727300000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020819055505b505b6105d8806104c26000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631c638f671461007b57806349e811c5146100d85780635b7739731461016757806387cfa5bf146101c45780638e7ea5b214610253578063b69ef8a81461027c575b600080fd5b341561008657600080fd5b6100d6600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506102a5565b005b34156100e357600080fd5b6100eb6102c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012c5780820151818401525b602081019050610110565b50505050905090810190601f1680156101595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017257600080fd5b6101c2600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061035e565b005b34156101cf57600080fd5b6101d7610379565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102185780820151818401525b6020810190506101fc565b50505050905090810190601f1680156102455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025e57600080fd5b610266610417565b6040518082815260200191505060405180910390f35b341561028757600080fd5b61028f610501565b6040518082815260200191505060405180910390f35b80600190805190602001906102bb929190610507565b505b50565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b505050505081565b8060029080519060200190610374929190610507565b505b50565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040f5780601f106103e45761010080835404028352916020019161040f565b820191906000526020600020905b8154815290600101906020018083116103f257829003601f168201915b505050505081565b600080600160405180828054600181600116156101000203166002900480156104775780601f10610455576101008083540402835291820191610477565b820191906000526020600020905b815481529060010190602001808311610463575b50509150509081526020016040518091039020600260405180828054600181600116156101000203166002900480156104e75780601f106104c55761010080835404028352918201916104e7565b820191906000526020600020905b8154815290600101906020018083116104d3575b505091505090815260200160405180910390205490505b90565b60035481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061054857805160ff1916838001178555610576565b82800160010185558215610576579182015b8281111561057557825182559160200191906001019061055a565b5b5090506105839190610587565b5090565b6105a991905b808211156105a557600081600090555060010161058d565b5090565b905600a165627a7a723058202697803ba75ff1fa20b1d5d3ba4b67cb36e5f417d25c1b226cc935b6f48b40c90029";

    private RpsNew(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private RpsNew(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<TransactionReceipt> setFirstChoice(Utf8String choice) {
        Function function = new Function("setFirstChoice", Arrays.<Type>asList(choice), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> choice1() {
        Function function = new Function("choice1", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> setSecondChoice(Utf8String choice) {
        Function function = new Function("setSecondChoice", Arrays.<Type>asList(choice), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> choice2() {
        Function function = new Function("choice2", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Int256> getWinner() {
        Function function = new Function("getWinner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> balance() {
        Function function = new Function("balance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<RpsNew> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Uint256 _balance) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_balance));
        return deployAsync(RpsNew.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<RpsNew> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Uint256 _balance) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_balance));
        return deployAsync(RpsNew.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static RpsNew load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RpsNew(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static RpsNew load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RpsNew(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
